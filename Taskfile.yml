# Taskfile for ProxmoxMCP
# Documentation: https://taskfile.dev/
version: "3"

vars:
  PYTHON_VERSION: "3.12"
  UV_EXTRA: "dev"

env:
  PYTHONPATH: "src:{{.PYTHONPATH}}"

tasks:
  # Default task
  default:
    desc: Show available tasks
    cmds:
      - task --list-all
    silent: true

  # Development setup
  setup:
    desc: Set up development environment (safe frozen install)
    cmds:
      - task: setup:frozen

  setup:frozen:
    desc: Set up development environment (frozen dependencies - no lock changes)
    cmds:
      - echo "üîß Setting up ProxmoxMCP development environment (frozen)..."
      - uv sync --extra {{.UV_EXTRA}} --frozen
      - echo "‚úÖ Development environment ready!"

  setup:update:
    desc: Set up development environment and update dependencies
    cmds:
      - echo "üîß Setting up ProxmoxMCP development environment with updates..."
      - uv sync --extra {{.UV_EXTRA}}
      - echo "‚ö†Ô∏è  Dependencies may have been updated - check git status"
      - echo "‚úÖ Development environment ready!"

  # YAML linting tasks
  yaml:lint:
    desc: Lint all YAML files (including .github, .codacy configs)
    cmds:
      - ./scripts/yaml-lint.sh
    sources:
      - "**/*.yml"
      - "**/*.yaml"
      - ".yamllint.yml"
    generates:
      - .task/yaml-lint-{{.CHECKSUM}}

  yaml:lint:dev:
    desc: Lint development YAML files (excludes .github/.codacy config directories)
    cmds:
      - |
        echo "üîç Linting development YAML files..."
        find . -type f \( -name "*.yml" -o -name "*.yaml" \) \
          -not -path "*/.codacy/*" \
          -not -path "*/.github/*" \
          -not -path "*/node_modules/*" \
          -not -path "*/.git/*" \
          -not -path "*/venv/*" \
          -not -path "*/.venv/*" \
          -not -path "*/__pycache__/*" \
          -not -name "pnpm-lock.yaml" \
          -not -name "yarn.lock" \
          -not -name "package-lock.json" \
          | while read -r file; do
              printf "Checking %-40s " "$(basename "$file")..."
              if uv run yamllint -c .yamllint.yml "$file" 2>/dev/null; then
                echo "‚úÖ"
              else
                echo "‚ùå"
                echo "Issues in $file:"
                uv run yamllint -c .yamllint.yml "$file" 2>&1 || true
                echo ""
              fi
            done
    sources:
      - "**/*.yml"
      - "**/*.yaml"
      - ".yamllint.yml"
    generates:
      - .task/yaml-lint-dev-{{.CHECKSUM}}

  yaml:fix:
    desc: Show detailed YAML linting issues
    cmds:
      - ./scripts/yaml-lint.sh --fix

  yaml:check:
    desc: Check YAML files (strict mode - exits with error)
    cmds:
      - ./scripts/yaml-lint.sh --check

  # Python code quality tasks
  format:
    desc: Format Python code with black
    cmds:
      - uv run black .
    sources:
      - "**/*.py"
    generates:
      - .task/format-{{.CHECKSUM}}

  format:check:
    desc: Check Python code formatting
    cmds:
      - uv run black . --check --diff

  lint:
    desc: Lint Python code with ruff
    cmds:
      - uv run ruff check .

  lint:fix:
    desc: Lint and auto-fix Python code with ruff
    cmds:
      - uv run ruff check . --fix

  type:check:
    desc: Run mypy type checking
    cmds:
      - uv run mypy . --exclude mem0-mcp

  # Testing tasks
  test:
    desc: Run all tests with enhanced validation
    cmds:
      - echo "üß™ Running comprehensive test suite..."
      - uv run pytest -v --tb=short
      - echo "üìä Test Summary - All unit tests completed"

  test:unit:
    desc: Run unit tests only
    cmds:
      - uv run pytest -v tests/ --tb=short

  test:coverage:
    desc: Run tests with coverage report (requires pytest-cov)
    cmds:
      - |
        if uv run python -c "import pytest_cov" 2>/dev/null; then
          uv run pytest --cov=src --cov-report=html --cov-report=term-missing --cov-fail-under=80
        else
          echo "‚ö†Ô∏è  pytest-cov not installed. Running tests without coverage..."
          echo "üí° Install with: uv add pytest-cov --group dev"
          uv run pytest -v
        fi

  test:watch:
    desc: Run tests in watch mode
    cmds:
      - |
        if uv run python -c "import pytest_watch" 2>/dev/null; then
          uv run pytest-watch
        else
          echo "‚ö†Ô∏è  pytest-watch not installed. Install with: uv add pytest-watch --group dev"
          echo "üîÑ Running tests once instead..."
          uv run pytest -v
        fi

  test:integration:
    desc: Run integration tests (requires Proxmox connection)
    cmds:
      - echo "üîó Integration tests require live Proxmox connection"
      - echo "‚ö†Ô∏è  Set PROXMOX_MCP_CONFIG before running integration tests"
      - echo "üöß Integration test suite not yet implemented"
      - echo "üí° Consider adding integration tests in tests/integration/"

  test:security:
    desc: Run security-focused tests
    cmds:
      - echo "üîí Running security-focused test subset..."
      - uv run pytest -v -k "encrypt or security or auth" --tb=short

  test:tools:
    desc: Run MCP tools tests
    cmds:
      - echo "üîß Running MCP tools test subset..."
      - uv run pytest -v tests/test_server.py tests/test_vm_console.py --tb=short

  test:config:
    desc: Run configuration and encryption tests
    cmds:
      - echo "‚öôÔ∏è  Running configuration test subset..."
      - uv run pytest -v tests/test_config_loader.py tests/test_encrypt_config.py tests/test_encryption.py --tb=short

  # Combined quality checks
  check:
    desc: Run all code quality checks
    deps:
      - format:check
      - lint
      - type:check
      - yaml:check

  fix:
    desc: Auto-fix all fixable issues (Python + YAML)
    cmds:
      - task: format
      - task: lint:fix
      - task: yaml:autofix

  yaml:autofix:
    desc: Auto-fix YAML spacing issues (trailing spaces, newlines, etc.)
    cmds:
      - ./scripts/yaml-autofix.sh
    sources:
      - "**/*.yml"
      - "**/*.yaml"
    generates:
      - .task/yaml-autofix-{{.CHECKSUM}}

  yaml:check-fixes:
    desc: Check which YAML files need auto-fixing
    cmds:
      - echo "Running yamllint to show remaining issues..."
      - ./scripts/yaml-lint.sh --fix || true

  # Legacy alias - keeping for backward compatibility
  autofix:
    desc: Auto-fix YAML files (alias for yaml:autofix)
    cmds:
      - task: yaml:autofix

  # Pre-commit style checks
  pre-commit:
    desc: Run pre-commit checks (format, lint, type-check, dev yaml)
    cmds:
      - task: format
      - task: lint:fix
      - task: type:check
      - task: yaml:lint:dev
      - echo "‚úÖ All pre-commit checks passed!"

  # CI simulation
  ci:
    desc: Run CI checks locally
    cmds:
      - echo "üöÄ Running CI checks locally..."
      - task: check
      - task: test
      - echo "‚úÖ All CI checks passed!"

  # Development server tasks (if applicable)
  dev:
    desc: Start development environment
    cmds:
      - echo "Starting ProxmoxMCP development server..."
      - uv run python -m src.proxmox_mcp.server

  # Dependency management
  deps:update:
    desc: Update dependencies (including dev dependencies)
    cmds:
      - uv sync --upgrade --extra {{.UV_EXTRA}}
      - echo "‚úÖ Dependencies updated!"

  deps:sync:
    desc: Sync dependencies without upgrades (safe, frozen versions)
    cmds:
      - uv sync --extra {{.UV_EXTRA}} --frozen
      - echo "‚úÖ Dependencies synced!"

  deps:lock:
    desc: Update lock file
    cmds:
      - uv lock
      - echo "‚úÖ Lock file updated!"

  # Docker tasks
  docker:build:
    desc: Build Docker image
    cmds:
      - docker build -t proxmox-mcp:latest .

  docker:run:
    desc: Run Docker container
    cmds:
      - docker run --rm -it proxmox-mcp:latest

  # Cleanup tasks
  clean:
    desc: Clean up generated files
    cmds:
      - rm -rf .pytest_cache/
      - rm -rf .mypy_cache/
      - rm -rf .ruff_cache/
      - rm -rf htmlcov/
      - rm -rf dist/
      - rm -rf build/
      - rm -rf *.egg-info/
      - find . -type d -name __pycache__ -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete
      - echo "‚úÖ Cleanup completed!"

  clean:all:
    desc: Deep clean including virtual environment
    deps: [clean]
    cmds:
      - rm -rf .venv/
      - rm -rf .task/
      - echo "‚úÖ Deep cleanup completed!"

  # Documentation tasks
  docs:serve:
    desc: Serve documentation locally
    cmds:
      - echo "üìö Serving documentation..."
      - python -m http.server 8000 -d docs/

  # Release tasks
  build:
    desc: Build package for distribution
    cmds:
      - uv build

  # Git hooks integration
  hooks:install:
    desc: Install git hooks (if using pre-commit)
    cmds:
      - echo "Installing git hooks..."
      - |
        if command -v pre-commit >/dev/null 2>&1; then
          pre-commit install
        else
          echo "‚ö†Ô∏è  pre-commit not found. Install with: pip install pre-commit"
        fi

  # Utility tasks
  info:
    desc: Show project information
    cmds:
      - echo "üìã ProxmoxMCP Project Information"
      - echo "=================================="
      - echo "Python version:" {{.PYTHON_VERSION}}
      - echo "UV version:" && uv --version
      - echo "Project root:" && pwd
      - echo "Virtual env:" && uv run python -c 'import sys; print(sys.executable)'
      - echo ""
      - echo "üîß Available tasks:"
      - task --list-all

  # Quick development workflow
  quick:
    desc: Quick development check (format + lint + test)
    cmds:
      - task: format
      - task: lint:fix
      - task: test
      - echo "‚úÖ Quick check completed!"
